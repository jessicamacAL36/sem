name: CI/CD Build and Container Test

on: 
  push:
    branches: [ "feature/mongo-intergration" ] # Target your current branch for testing

jobs:
  build:
    name: Build, Containerize, and Test
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 1. Setup Java 17 and Maven Cache
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 2. Build the Fat JAR (CRITICAL FIX: Use 'install' to guarantee the artifact is ready for Docker)
      - name: Build and Package with Maven
        run: mvn clean install  # <-- FIXED COMMAND

      # 3. Setup Docker Network and MongoDB
      - name: Setup Docker Network and MongoDB
        run: |
          docker network create --driver bridge se-methods
          # Run MongoDB, naming it 'mongodb' for service discovery
          docker run -d --name mongodb --network se-methods mongo:latest

      # 4. Build the Application Docker Image
      - name: Build Application Image
        run: docker build -t devopsimage .

      # 5. Run the Application Image on the Network
      - name: Run Application Container
        run: docker run --network se-methods --name devopscontainer devopsimage

      # 6. View Logs (Confirm successful execution)
      - name: View Application Logs
        run: docker logs devopscontainer
        
      # 7. Cleanup (Runs regardless of success/failure)
      - name: Cleanup Containers and Network
        if: always() 
        run: |
          docker stop mongodb devopscontainer || true
          docker rm mongodb devopscontainer || true
          docker network rm se-methods || true
